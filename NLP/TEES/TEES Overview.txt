a) Preprocessor.py: the Preprocessor is used to import a corpus into the Interaction XML format and run syntactic parsing, format conversion, sentence splitting, NER etc.
	Code: TEES/Detectors/Preprocessor.py

1. Splitting sentences using GENIA Sentence Splitter which has been optimized for biomedical texts.
	Code: TEES/Tools/GeniaSentenceSplitter.py
2. NER
	Code: TEES/Tools/BANNER.py
3. POS tagging
	Code: TEES/Tools/Parser.py
4. Dependency Parsing: Stanford, BLLIP parser with David McClosky's biomodel: domain-specific DP
	Code: TEES/Tools/StanfordParser.py & BLLIPParser.py

5. Feature Extraction: Two types of features (dependency features and token features)

Example:

<corpus source="GE11">
  <document id="GE11.d6">
    <sentence charOffset="0-33" id="GE11.d6.s0" tail="&#10;" text="BMP-6 induces upregulation of Id1">
      <entity charOffset="0-5" given="True" headOffset="0-5" id="GE11.d6.s0.e0" origId="PMC-1134658-06-Results-05.T1" origOffset="0-5" text="BMP-6" type="Protein" />
      <entity charOffset="30-33" given="True" headOffset="30-33" id="GE11.d6.s0.e1" origId="PMC-1134658-06-Results-05.T2" origOffset="30-33" text="Id1" type="Protein" />
      <entity charOffset="6-13" event="True" headOffset="6-13" id="GE11.d6.s0.e28" origId="PMC-1134658-06-Results-05.T29" origOffset="6-13" text="induces" type="Positive_regulation" />
      <entity charOffset="14-26" event="True" headOffset="14-26" id="GE11.d6.s0.e29" origId="PMC-1134658-06-Results-05.T30" origOffset="14-26" text="upregulation" type="Positive_regulation" />
      <interaction directed="True" e1="GE11.d6.s0.e28" e2="GE11.d6.s0.e29" event="True" id="GE11.d6.s0.i0" origId="PMC-1134658-06-Results-05.E1.0" type="Theme" />
      <interaction directed="True" e1="GE11.d6.s0.e28" e2="GE11.d6.s0.e0" event="True" id="GE11.d6.s0.i1" origId="PMC-1134658-06-Results-05.E1.1" type="Cause" />
      <interaction directed="True" e1="GE11.d6.s0.e29" e2="GE11.d6.s0.e1" event="True" id="GE11.d6.s0.i2" origId="PMC-1134658-06-Results-05.E2.0" type="Theme" />
      <analyses>
        <tokenization ProteinNameSplitter="True" source="BioNLP&apos;11" tokenizer="McCC">
          <token POS="NN" charOffset="0-5" headScore="1" id="bt_0" text="BMP-6" />
          <token POS="VBZ" charOffset="6-13" headScore="1" id="bt_1" text="induces" />
          <token POS="NN" charOffset="14-26" headScore="1" id="bt_2" text="upregulation" />
          <token POS="IN" charOffset="27-29" headScore="0" id="bt_3" text="of" />
          <token POS="NN" charOffset="30-33" headScore="1" id="bt_4" text="Id1" />
        </tokenization>
        <parse ProteinNameSplitter="True" parser="McCC" pennstring="(S1 (S (NP (NN BMP-6)) (VP (VBZ induces) (NP (NP (NN upregulation)) (PP (IN of) (NP (NN Id1)))))))" source="BioNLP&apos;11" stanford="ok" tokenizer="McCC">
          <dependency id="sd_0" t1="bt_1" t2="bt_0" type="nsubj" />
          <dependency id="sd_1" t1="bt_1" t2="bt_2" type="dobj" />
          <dependency id="sd_2" t1="bt_2" t2="bt_4" type="prep_of" />
          <phrase begin="0" charOffset="0-5" end="0" id="bp_0" type="NP" />
          <phrase begin="0" charOffset="0-33" end="4" id="bp_1" type="S" />
          <phrase begin="0" charOffset="0-33" end="4" id="bp_2" type="S1" />
          <phrase begin="1" charOffset="6-33" end="4" id="bp_3" type="VP" />
          <phrase begin="2" charOffset="14-26" end="2" id="bp_4" type="NP" />
          <phrase begin="2" charOffset="14-33" end="4" id="bp_5" type="NP" />
          <phrase begin="3" charOffset="27-33" end="4" id="bp_6" type="PP" />
          <phrase begin="4" charOffset="30-33" end="4" id="bp_7" type="NP" />
        </parse>
      </analyses>
    </sentence>
  </document>
</corpus>


b) ExampleBuilder, the class used to convert Interaction XML into machine learning examples and feature vectors
	code: TEES/ExampleBuilders/ExampleBuilder.py
	
* classify.py - Predict events/relations with an existing model
	classes: Gene_expression, Transcription, Protein_catabolism, Phosphorylation, Localization, Binding

 * train.py - Train a new event/relation extraction model
 * batch.py - Batch process large sets of input files
 * configure.py - Install TEES models, external tools and corpora
 * visualize.py - Visualize the events and parse for a sentence